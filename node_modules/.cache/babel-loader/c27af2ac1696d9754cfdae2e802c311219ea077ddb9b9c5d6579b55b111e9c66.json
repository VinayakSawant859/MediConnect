{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\test\\\\src\\\\components\\\\MultilingualChatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport OpenAI from 'openai';\n\n// Initialize OpenAI\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst openai = new OpenAI();\nconst Chatbot = () => {\n  _s();\n  const [userMessage, setUserMessage] = useState('');\n  const [chatLog, setChatLog] = useState([]);\n  const [isListening, setIsListening] = useState(false);\n\n  // Initialize Speech Recognition and Synthesis\n  const speechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  const recognition = new speechRecognition();\n  const synth = window.speechSynthesis;\n\n  // Start listening to the user’s voice\n  const startListening = () => {\n    setIsListening(true);\n    recognition.start();\n  };\n\n  // Stop listening\n  recognition.onend = () => {\n    setIsListening(false);\n  };\n\n  // When a result is received from speech recognition\n  recognition.onresult = event => {\n    const userSpeech = event.results[0][0].transcript;\n    setUserMessage(userSpeech);\n    handleChat(userSpeech); // Send recognized speech to the chatbot\n  };\n\n  // Handle chatbot response\n  const handleChat = async userInput => {\n    const messages = [{\n      role: 'system',\n      content: 'You are a helpful assistant.'\n    }, ...chatLog, {\n      role: 'user',\n      content: userInput\n    }];\n    const completion = await openai.chat.completions.create({\n      messages: messages,\n      model: 'gpt-4'\n    });\n    const assistantReply = completion.choices[0].message.content;\n    setChatLog([...messages, {\n      role: 'assistant',\n      content: assistantReply\n    }]);\n\n    // Convert chatbot response to speech\n    const utterance = new SpeechSynthesisUtterance(assistantReply);\n    synth.speak(utterance);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Multilingual Voice Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startListening,\n      children: isListening ? 'Listening...' : 'Click to Speak'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: chatLog.map((chat, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [chat.role, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 26\n        }, this), \" \", chat.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"eISnvfarYNN1DexIOWacpdlk9zI=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","OpenAI","jsxDEV","_jsxDEV","openai","Chatbot","_s","userMessage","setUserMessage","chatLog","setChatLog","isListening","setIsListening","speechRecognition","window","SpeechRecognition","webkitSpeechRecognition","recognition","synth","speechSynthesis","startListening","start","onend","onresult","event","userSpeech","results","transcript","handleChat","userInput","messages","role","content","completion","chat","completions","create","model","assistantReply","choices","message","utterance","SpeechSynthesisUtterance","speak","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","_c","$RefreshReg$"],"sources":["C:/Users/ADMIN/test/src/components/MultilingualChatbot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport OpenAI from 'openai';\r\n\r\n// Initialize OpenAI\r\nconst openai = new OpenAI();\r\n\r\nconst Chatbot = () => {\r\n  const [userMessage, setUserMessage] = useState('');\r\n  const [chatLog, setChatLog] = useState([]);\r\n  const [isListening, setIsListening] = useState(false);\r\n\r\n  // Initialize Speech Recognition and Synthesis\r\n  const speechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n  const recognition = new speechRecognition();\r\n  const synth = window.speechSynthesis;\r\n\r\n  // Start listening to the user’s voice\r\n  const startListening = () => {\r\n    setIsListening(true);\r\n    recognition.start();\r\n  };\r\n\r\n  // Stop listening\r\n  recognition.onend = () => {\r\n    setIsListening(false);\r\n  };\r\n\r\n  // When a result is received from speech recognition\r\n  recognition.onresult = (event) => {\r\n    const userSpeech = event.results[0][0].transcript;\r\n    setUserMessage(userSpeech);\r\n    handleChat(userSpeech);  // Send recognized speech to the chatbot\r\n  };\r\n\r\n  // Handle chatbot response\r\n  const handleChat = async (userInput) => {\r\n    const messages = [\r\n      { role: 'system', content: 'You are a helpful assistant.' },\r\n      ...chatLog,\r\n      { role: 'user', content: userInput },\r\n    ];\r\n\r\n    const completion = await openai.chat.completions.create({\r\n      messages: messages,\r\n      model: 'gpt-4',\r\n    });\r\n\r\n    const assistantReply = completion.choices[0].message.content;\r\n\r\n    setChatLog([...messages, { role: 'assistant', content: assistantReply }]);\r\n\r\n    // Convert chatbot response to speech\r\n    const utterance = new SpeechSynthesisUtterance(assistantReply);\r\n    synth.speak(utterance);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Multilingual Voice Chatbot</h1>\r\n\r\n      {/* Button to trigger voice input */}\r\n      <button onClick={startListening}>\r\n        {isListening ? 'Listening...' : 'Click to Speak'}\r\n      </button>\r\n\r\n      {/* Display chat log */}\r\n      <div>\r\n        {chatLog.map((chat, index) => (\r\n          <p key={index}><strong>{chat.role}:</strong> {chat.content}</p>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}