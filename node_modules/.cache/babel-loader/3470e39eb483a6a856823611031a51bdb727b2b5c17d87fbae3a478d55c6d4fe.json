{"ast":null,"code":"import axios from 'axios';\nconst API_KEY = ''; // Replace with your actual API key\n\nexport async function fetchYouTubeRecommendations(searchQuery) {\n  const languages = ['hi', 'mr']; // Hindi and Marathi\n  const maxResults = 6; // Set the maximum results you want\n\n  const fetchVideos = async lang => {\n    const URL = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${searchQuery}&type=video&key=${API_KEY}&maxResults=${maxResults}&relevanceLanguage=${lang}`;\n    try {\n      const response = await axios.get(URL);\n      return response.data.items;\n    } catch (error) {\n      console.error(\"Error fetching YouTube videos\", error);\n      return [];\n    }\n  };\n\n  // Fetch videos for both languages\n  const hindiVideos = await fetchVideos('hi');\n  const marathiVideos = await fetchVideos('mr');\n\n  // Combine results and remove duplicates if necessary\n  const allVideos = [...hindiVideos, ...marathiVideos];\n\n  // Optionally limit to 6 unique videos\n  const uniqueVideos = Array.from(new Set(allVideos.map(video => video.id.videoId))).slice(0, maxResults).map(id => allVideos.find(video => video.id.videoId === id));\n  return uniqueVideos;\n}","map":{"version":3,"names":["axios","API_KEY","fetchYouTubeRecommendations","searchQuery","languages","maxResults","fetchVideos","lang","URL","response","get","data","items","error","console","hindiVideos","marathiVideos","allVideos","uniqueVideos","Array","from","Set","map","video","id","videoId","slice","find"],"sources":["C:/Users/ADMIN/test/src/youtubeService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_KEY = '';  // Replace with your actual API key\r\n\r\nexport async function fetchYouTubeRecommendations(searchQuery) {\r\n    const languages = ['hi', 'mr']; // Hindi and Marathi\r\n    const maxResults = 6; // Set the maximum results you want\r\n\r\n    const fetchVideos = async (lang) => {\r\n        const URL = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${searchQuery}&type=video&key=${API_KEY}&maxResults=${maxResults}&relevanceLanguage=${lang}`;\r\n        try {\r\n            const response = await axios.get(URL);\r\n            return response.data.items;\r\n        } catch (error) {\r\n            console.error(\"Error fetching YouTube videos\", error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    // Fetch videos for both languages\r\n    const hindiVideos = await fetchVideos('hi');\r\n    const marathiVideos = await fetchVideos('mr');\r\n\r\n    // Combine results and remove duplicates if necessary\r\n    const allVideos = [...hindiVideos, ...marathiVideos];\r\n\r\n    // Optionally limit to 6 unique videos\r\n    const uniqueVideos = Array.from(new Set(allVideos.map(video => video.id.videoId)))\r\n        .slice(0, maxResults)\r\n        .map(id => allVideos.find(video => video.id.videoId === id));\r\n\r\n    return uniqueVideos;\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,EAAE,CAAC,CAAE;;AAErB,OAAO,eAAeC,2BAA2BA,CAACC,WAAW,EAAE;EAC3D,MAAMC,SAAS,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;EAChC,MAAMC,UAAU,GAAG,CAAC,CAAC,CAAC;;EAEtB,MAAMC,WAAW,GAAG,MAAOC,IAAI,IAAK;IAChC,MAAMC,GAAG,GAAG,+DAA+DL,WAAW,mBAAmBF,OAAO,eAAeI,UAAU,sBAAsBE,IAAI,EAAE;IACrK,IAAI;MACA,MAAME,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAACF,GAAG,CAAC;MACrC,OAAOC,QAAQ,CAACE,IAAI,CAACC,KAAK;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,OAAO,EAAE;IACb;EACJ,CAAC;;EAED;EACA,MAAME,WAAW,GAAG,MAAMT,WAAW,CAAC,IAAI,CAAC;EAC3C,MAAMU,aAAa,GAAG,MAAMV,WAAW,CAAC,IAAI,CAAC;;EAE7C;EACA,MAAMW,SAAS,GAAG,CAAC,GAAGF,WAAW,EAAE,GAAGC,aAAa,CAAC;;EAEpD;EACA,MAAME,YAAY,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAACJ,SAAS,CAACK,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACC,EAAE,CAACC,OAAO,CAAC,CAAC,CAAC,CAC7EC,KAAK,CAAC,CAAC,EAAErB,UAAU,CAAC,CACpBiB,GAAG,CAACE,EAAE,IAAIP,SAAS,CAACU,IAAI,CAACJ,KAAK,IAAIA,KAAK,CAACC,EAAE,CAACC,OAAO,KAAKD,EAAE,CAAC,CAAC;EAEhE,OAAON,YAAY;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}