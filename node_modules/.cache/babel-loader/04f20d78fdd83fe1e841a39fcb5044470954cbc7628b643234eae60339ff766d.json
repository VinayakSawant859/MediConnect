{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\test\\\\src\\\\firebase\\\\PhoneSignin.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport PhoneInput from \"react-phone-input-2\";\nimport 'react-phone-input-2/lib/style.css';\nimport \"./phone.css\";\nimport { MdTextFields } from \"react-icons/md\";\nimport { GiSmallFire } from \"react-icons/gi\";\nimport { multiFactor, PhoneAuthProvider, PhoneMultiFactorGenerator, RecaptchaVerifier } from \"firebase/auth\";\nimport { signInWithPhoneNumber } from \"firebase/auth\";\nimport firebaseConfig from \"./setup\";\nimport * as firebaseui from 'firebaseui';\nimport { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PhoneSignin() {\n  _s();\n  const [phone, setPhone] = useState(\"\");\n  const [user, setUser] = useState(\"\");\n  const [otp, setOtp] = useState(\"\");\n  const auth = getAuth();\n\n  // const sendOtp =async()=>{\n  //     try{\n  //         const recaptchaVerifier = new RecaptchaVerifier('recaptcha-container-id', undefined, auth);\n  //         multiFactor(user).getSession()\n  //             .then(function (multiFactorSession) {\n  //                 // Specify the phone number and pass the MFA session.\n  //                 const phoneInfoOptions = {\n  //                     phoneNumber: phone,\n  //                     session: multiFactorSession\n  //                 };\n\n  //                 const phoneAuthProvider = new PhoneAuthProvider(auth);\n\n  //                 // Send SMS verification code.\n  //                 return phoneAuthProvider.verifyPhoneNumber(phoneInfoOptions, recaptchaVerifier);\n  //             }).then(function (verificationId) {\n  //                 // Ask user for the verification code. Then:\n  //                 const cred = PhoneAuthProvider.credential(verificationId, otp);\n  //                 const multiFactorAssertion = PhoneMultiFactorGenerator.assertion(cred);\n\n  //                 // Complete enrollment.\n  //                 return multiFactor(user).enroll(multiFactorAssertion, \"mfaDisplayName\");\n  //             });\n  //         // const confirmation = signInWithPhoneNumber(auth,phone,recaptcha)\n  //         // setUser(confirmation)\n  //     }catch(err){\n  //         console.error(err)\n  //     }\n\n  // }\n\n  // const verifyOtp=async()=>{\n  //     try{\n  //         const data = await user.confirm(otp)\n  //         console.log(data)\n  //     }catch(err)\n  //     {\n  //         console.error(err) \n  //     }\n\n  // }\n\n  React.useEffect(() => {\n    const uiConfig = {\n      signInSuccessUrl: \"http://localhost:3000/\",\n      //This URL is used to return to that page when we got success response for phone authentication.\n      signInOptions: [auth.PhoneAuthProvider.PROVIDER_ID],\n      tosUrl: \"http://localhost:3000/\"\n    };\n    var ui = new firebaseui.auth.AuthUI(auth);\n    ui.start(\"#firebaseui-auth-container\", uiConfig);\n  }, []);\n  return (\n    /*#__PURE__*/\n    // <div className=\"phone-signin\">\n    //     <div className=\"phone-content\">\n    //     <PhoneInput\n    //         country={'us'}\n    //          value={phone}\n    //          onChange={(phone)=>setPhone(\"+\"  + phone  )}\n    //     />\n    // <button onClick={sendOtp} sx= {{marginTop:\"10px\"}}   variant='contained '>Send OTP </button>\n    // <div style={{marginTop:\"10px\"}}  id=\" recaptcha\">\n    // </div>\n    // <br/>\n    // <input onChange={(e)=> setOtp(e.target.value)}  aria-label=\"Enter OTP \"/>\n    // <br/>\n    //     <button onClick={verifyOtp} sx={{marginTop:\"10px\"}}   variant=\"contained\" color=\"success \">Verify OTP</button>\n    //     </div>\n    // </div> \n    _jsxDEV(\"div\", {\n      id: \"firebaseui-auth-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(PhoneSignin, \"uEjnBK+bl9denj0pCOZJhlRKLlI=\");\n_c = PhoneSignin;\nexport default PhoneSignin;\nvar _c;\n$RefreshReg$(_c, \"PhoneSignin\");","map":{"version":3,"names":["React","useState","PhoneInput","MdTextFields","GiSmallFire","multiFactor","PhoneAuthProvider","PhoneMultiFactorGenerator","RecaptchaVerifier","signInWithPhoneNumber","firebaseConfig","firebaseui","initializeApp","getAuth","jsxDEV","_jsxDEV","PhoneSignin","_s","phone","setPhone","user","setUser","otp","setOtp","auth","useEffect","uiConfig","signInSuccessUrl","signInOptions","PROVIDER_ID","tosUrl","ui","AuthUI","start","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ADMIN/test/src/firebase/PhoneSignin.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport \"./phone.css\"\r\nimport { MdTextFields } from \"react-icons/md\";\r\nimport { GiSmallFire } from \"react-icons/gi\";\r\nimport {\r\n    multiFactor, PhoneAuthProvider, PhoneMultiFactorGenerator,\r\n    RecaptchaVerifier\r\n} from \"firebase/auth\";\r\nimport { signInWithPhoneNumber } from \"firebase/auth\";\r\nimport firebaseConfig from \"./setup\";\r\nimport * as firebaseui from 'firebaseui'\r\nimport {initializeApp} from 'firebase/app'\r\nimport {getAuth} from 'firebase/auth'\r\n\r\n function PhoneSignin() {\r\n\r\n    const [phone,setPhone] = useState(\"\")\r\n    const [user, setUser] = useState(\"\")\r\n    const [otp, setOtp] =useState (\"\")\r\n    const auth = getAuth()\r\n\r\n    // const sendOtp =async()=>{\r\n    //     try{\r\n    //         const recaptchaVerifier = new RecaptchaVerifier('recaptcha-container-id', undefined, auth);\r\n    //         multiFactor(user).getSession()\r\n    //             .then(function (multiFactorSession) {\r\n    //                 // Specify the phone number and pass the MFA session.\r\n    //                 const phoneInfoOptions = {\r\n    //                     phoneNumber: phone,\r\n    //                     session: multiFactorSession\r\n    //                 };\r\n            \r\n    //                 const phoneAuthProvider = new PhoneAuthProvider(auth);\r\n            \r\n    //                 // Send SMS verification code.\r\n    //                 return phoneAuthProvider.verifyPhoneNumber(phoneInfoOptions, recaptchaVerifier);\r\n    //             }).then(function (verificationId) {\r\n    //                 // Ask user for the verification code. Then:\r\n    //                 const cred = PhoneAuthProvider.credential(verificationId, otp);\r\n    //                 const multiFactorAssertion = PhoneMultiFactorGenerator.assertion(cred);\r\n            \r\n    //                 // Complete enrollment.\r\n    //                 return multiFactor(user).enroll(multiFactorAssertion, \"mfaDisplayName\");\r\n    //             });\r\n    //         // const confirmation = signInWithPhoneNumber(auth,phone,recaptcha)\r\n    //         // setUser(confirmation)\r\n    //     }catch(err){\r\n    //         console.error(err)\r\n    //     }\r\n      \r\n    // }\r\n\r\n    // const verifyOtp=async()=>{\r\n    //     try{\r\n    //         const data = await user.confirm(otp)\r\n    //         console.log(data)\r\n    //     }catch(err)\r\n    //     {\r\n    //         console.error(err) \r\n    //     }\r\n        \r\n        \r\n    // }\r\n\r\n    React.useEffect(()=>{\r\n        const uiConfig = {\r\n            signInSuccessUrl: \"http://localhost:3000/\", //This URL is used to return to that page when we got success response for phone authentication.\r\n            signInOptions: [auth.PhoneAuthProvider.PROVIDER_ID],\r\n            tosUrl: \"http://localhost:3000/\"\r\n          };\r\n          var ui = new firebaseui.auth.AuthUI(auth);\r\n          ui.start(\"#firebaseui-auth-container\",Â uiConfig);\r\n    },[])\r\n\r\n    return (\r\n        // <div className=\"phone-signin\">\r\n        //     <div className=\"phone-content\">\r\n        //     <PhoneInput\r\n        //         country={'us'}\r\n        //          value={phone}\r\n        //          onChange={(phone)=>setPhone(\"+\"  + phone  )}\r\n        //     />\r\n        // <button onClick={sendOtp} sx= {{marginTop:\"10px\"}}   variant='contained '>Send OTP </button>\r\n        // <div style={{marginTop:\"10px\"}}  id=\" recaptcha\">\r\n\r\n        // </div>\r\n        // <br/>\r\n\r\n        // <input onChange={(e)=> setOtp(e.target.value)}  aria-label=\"Enter OTP \"/>\r\n        // <br/>\r\n        //     <button onClick={verifyOtp} sx={{marginTop:\"10px\"}}   variant=\"contained\" color=\"success \">Verify OTP</button>\r\n        //     </div>\r\n            \r\n        // </div> \r\n        <div id=\"firebaseui-auth-container\"></div>\r\n ) \r\n}\r\n\r\nexport default PhoneSignin"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,qBAAqB;AAC5C,OAAO,mCAAmC;AAC1C,OAAO,aAAa;AACpB,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SACIC,WAAW,EAAEC,iBAAiB,EAAEC,yBAAyB,EACzDC,iBAAiB,QACd,eAAe;AACtB,SAASC,qBAAqB,QAAQ,eAAe;AACrD,OAAOC,cAAc,MAAM,SAAS;AACpC,OAAO,KAAKC,UAAU,MAAM,YAAY;AACxC,SAAQC,aAAa,QAAO,cAAc;AAC1C,SAAQC,OAAO,QAAO,eAAe;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EAEpB,MAAM,CAACC,KAAK,EAACC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACrC,MAAM,CAACmB,IAAI,EAAEC,OAAO,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACqB,GAAG,EAAEC,MAAM,CAAC,GAAEtB,QAAQ,CAAE,EAAE,CAAC;EAClC,MAAMuB,IAAI,GAAGX,OAAO,CAAC,CAAC;;EAEtB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;;EAEAb,KAAK,CAACyB,SAAS,CAAC,MAAI;IAChB,MAAMC,QAAQ,GAAG;MACbC,gBAAgB,EAAE,wBAAwB;MAAE;MAC5CC,aAAa,EAAE,CAACJ,IAAI,CAAClB,iBAAiB,CAACuB,WAAW,CAAC;MACnDC,MAAM,EAAE;IACV,CAAC;IACD,IAAIC,EAAE,GAAG,IAAIpB,UAAU,CAACa,IAAI,CAACQ,MAAM,CAACR,IAAI,CAAC;IACzCO,EAAE,CAACE,KAAK,CAAC,4BAA4B,EAAEP,QAAQ,CAAC;EACtD,CAAC,EAAC,EAAE,CAAC;EAEL;IAAA;IACI;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IAEA;IACAX,OAAA;MAAKmB,EAAE,EAAC;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;AAElD;AAACrB,EAAA,CAlFSD,WAAW;AAAAuB,EAAA,GAAXvB,WAAW;AAoFrB,eAAeA,WAAW;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}