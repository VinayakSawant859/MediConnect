{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\test\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst languages = {\n  english: {\n    welcome: \"Welcome to the Chatbot!\",\n    greeting: \"Hello! How can I assist you today?\",\n    notFound: \"I'm sorry, I didn't understand that. Can you please rephrase?\",\n    placeholder: \"Type your message...\",\n    recommendRemedies: \"Here are some remedies:\",\n    recommendMedication: \"You may consider these medications:\",\n    questionPrompt: \"Please tell me your symptoms:\",\n    clearChat: \"Clear Chat\",\n    disclaimer: \"This chatbot is for informational purposes only.\"\n  },\n  hindi: {\n    welcome: \"चैटबॉट में आपका स्वागत है!\",\n    greeting: \"नमस्ते! मैं आपकी कैसे मदद कर सकता हूँ?\",\n    notFound: \"मुझे खेद है, मैंने उसे समझा नहीं। क्या आप कृपया पुनःphrase कर सकते हैं?\",\n    placeholder: \"अपना संदेश टाइप करें...\",\n    recommendRemedies: \"यहाँ कुछ उपचार दिए गए हैं:\",\n    recommendMedication: \"आप इन दवाओं पर विचार कर सकते हैं:\",\n    questionPrompt: \"कृपया मुझे अपने लक्षण बताएं:\",\n    clearChat: \"चैट साफ करें\",\n    disclaimer: \"यह चैटबॉट केवल सूचना के उद्देश्यों के लिए है।\"\n  },\n  marathi: {\n    welcome: \"चॅटबॉटमध्ये तुमचे स्वागत आहे!\",\n    greeting: \"नमस्कार! मी तुम्हाला कशाप्रकारे मदत करू शकतो?\",\n    notFound: \"माझा खेद आहे, मी ते समजू शकलो नाही. कृपया पुन्हा वाक्यांशित करा.\",\n    placeholder: \"तुमचा संदेश टाइप करा...\",\n    recommendRemedies: \"इथे काही उपचार आहेत:\",\n    recommendMedication: \"तुम्ही या औषधांचा विचार करू शकता:\",\n    questionPrompt: \"कृपया तुमचे लक्षणे सांगा:\",\n    clearChat: \"चॅट साफ करा\",\n    disclaimer: \"हा चॅटबॉट माहितीच्या उद्देशांसाठी आहे.\"\n  }\n};\nconst medicalQA = {\n  english: {\n    \"headache\": {\n      questions: [\"How severe is your headache?\", \"Are you experiencing any nausea?\", \"Do you have sensitivity to light or sound?\"],\n      remedies: [\"Rest in a quiet and dark room.\", \"Apply a cold compress to your forehead.\", \"Drink plenty of fluids.\"],\n      medications: [\"Acetaminophen (Tylenol)\", \"Ibuprofen (Advil, Motrin)\", \"Aspirin\"]\n    },\n    \"fever\": {\n      questions: [\"What is your current temperature?\", \"Are you feeling chills or sweating?\", \"Have you experienced any other symptoms?\"],\n      remedies: [\"Rest and get plenty of sleep.\", \"Drink plenty of fluids (water, clear broth, herbal tea).\", \"Wear light clothing.\"],\n      medications: [\"Acetaminophen (Tylenol)\", \"Ibuprofen (Advil, Motrin)\"]\n    }\n    // Add more conditions here...\n  },\n  hindi: {\n    \"सिरदर्द\": {\n      questions: [\"आपका सिरदर्द कितना गंभीर है?\", \"क्या आपको मतली का अनुभव हो रहा है?\", \"क्या आपको रोशनी या ध्वनि के प्रति संवेदनशीलता है?\"],\n      remedies: [\"एक शांत और अंधेरी जगह पर आराम करें।\", \"अपने माथे पर ठंडी पट्टी लगाएं।\", \"पर्याप्त मात्रा में तरल पदार्थ पिएं।\"],\n      medications: [\"अॅसिटामिनोफेन (टायलेनॉल)\", \"आयबुप्रोफेन (एडविल, मोट्रिन)\", \"असपिरिन\"]\n    }\n    // Add more conditions here...\n  },\n  marathi: {\n    \"ताप\": {\n      questions: [\"तुमचा सद्य तापमान किती आहे?\", \"तुम्हाला थंडी किंवा घाम येत आहे का?\", \"तुम्हाला इतर कोणते लक्षणे अनुभवली आहेत का?\"],\n      remedies: [\"आराम करा आणि भरपूर झोप घ्या\", \"भरपूर पाणी प्या (पाणी, स्वच्छ शोरबा, औषधी चहा)\", \"हलके कपडे घाला\"],\n      medications: [\"अॅसिटामिनोफेन (टायलेनॉल)\", \"आयबुप्रोफेन (एडविल, मोट्रिन)\"]\n    }\n    // Add more conditions here...\n  }\n};\nconst Chatbot = () => {\n  _s();\n  const [userMessage, setUserMessage] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n  const [language, setLanguage] = useState('english');\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(-1);\n  const [currentCondition, setCurrentCondition] = useState('');\n  const handleLanguageChange = e => {\n    setLanguage(e.target.value);\n    setChatHistory([]);\n    setCurrentQuestionIndex(-1); // Reset question index\n  };\n  const handleSendMessage = e => {\n    e.preventDefault();\n    if (!userMessage) return;\n\n    // Store user message in chat history\n    setChatHistory(prev => [...prev, {\n      user: userMessage\n    }]);\n\n    // Process the message\n    const lowerCaseMessage = userMessage.toLowerCase();\n    const response = processMessage(lowerCaseMessage);\n\n    // Store response in chat history\n    setChatHistory(prev => [...prev, {\n      bot: response\n    }]);\n    setUserMessage('');\n  };\n  const processMessage = message => {\n    // Handle greeting\n    if (message.includes(\"hi\") || message.includes(\"hello\")) {\n      return languages[language].greeting;\n    }\n\n    // Check for medical questions\n    const medicalTerms = Object.keys(medicalQA[language]);\n    for (let term of medicalTerms) {\n      if (message.includes(term)) {\n        setCurrentCondition(term);\n        setCurrentQuestionIndex(0); // Start asking the first question\n        return languages[language].questionPrompt; // Initial prompt\n      }\n    }\n\n    // Handle questions\n    if (currentCondition && currentQuestionIndex >= 0) {\n      const questions = medicalQA[language][currentCondition].questions;\n      if (currentQuestionIndex < questions.length) {\n        const question = questions[currentQuestionIndex];\n        setCurrentQuestionIndex(currentQuestionIndex + 1); // Move to the next question\n        return question;\n      } else {\n        // If all questions have been asked, provide remedies and medications\n        const {\n          remedies,\n          medications\n        } = medicalQA[language][currentCondition];\n        const response = languages[language].recommendRemedies + '\\n' + remedies.join('\\n') + '\\n\\n' + languages[language].recommendMedication + '\\n' + medications.join('\\n');\n        // Reset current condition and question index\n        setCurrentCondition('');\n        setCurrentQuestionIndex(-1);\n        return response;\n      }\n    }\n\n    // If no known terms found\n    return languages[language].notFound;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: languages[language].welcome\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: language,\n      onChange: handleLanguageChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"english\",\n        children: \"English\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"hindi\",\n        children: \"Hindi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"marathi\",\n        children: \"Marathi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-history\",\n        children: chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: entry.user ? \"user-message\" : \"bot-message\",\n          children: entry.user ? entry.user : entry.bot\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: languages[language].placeholder,\n          value: userMessage,\n          onChange: e => setUserMessage(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"disclaimer\",\n      children: languages[language].disclaimer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setChatHistory([]),\n      children: languages[language].clearChat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"teV5F5Jm2PEP3kubCjl0BSeIuOI=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","languages","english","welcome","greeting","notFound","placeholder","recommendRemedies","recommendMedication","questionPrompt","clearChat","disclaimer","hindi","marathi","medicalQA","questions","remedies","medications","Chatbot","_s","userMessage","setUserMessage","chatHistory","setChatHistory","language","setLanguage","currentQuestionIndex","setCurrentQuestionIndex","currentCondition","setCurrentCondition","handleLanguageChange","e","target","value","handleSendMessage","preventDefault","prev","user","lowerCaseMessage","toLowerCase","response","processMessage","bot","message","includes","medicalTerms","Object","keys","term","length","question","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","entry","index","onSubmit","type","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ADMIN/test/src/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst languages = {\r\n  english: {\r\n    welcome: \"Welcome to the Chatbot!\",\r\n    greeting: \"Hello! How can I assist you today?\",\r\n    notFound: \"I'm sorry, I didn't understand that. Can you please rephrase?\",\r\n    placeholder: \"Type your message...\",\r\n    recommendRemedies: \"Here are some remedies:\",\r\n    recommendMedication: \"You may consider these medications:\",\r\n    questionPrompt: \"Please tell me your symptoms:\",\r\n    clearChat: \"Clear Chat\",\r\n    disclaimer: \"This chatbot is for informational purposes only.\"\r\n  },\r\n  hindi: {\r\n    welcome: \"चैटबॉट में आपका स्वागत है!\",\r\n    greeting: \"नमस्ते! मैं आपकी कैसे मदद कर सकता हूँ?\",\r\n    notFound: \"मुझे खेद है, मैंने उसे समझा नहीं। क्या आप कृपया पुनःphrase कर सकते हैं?\",\r\n    placeholder: \"अपना संदेश टाइप करें...\",\r\n    recommendRemedies: \"यहाँ कुछ उपचार दिए गए हैं:\",\r\n    recommendMedication: \"आप इन दवाओं पर विचार कर सकते हैं:\",\r\n    questionPrompt: \"कृपया मुझे अपने लक्षण बताएं:\",\r\n    clearChat: \"चैट साफ करें\",\r\n    disclaimer: \"यह चैटबॉट केवल सूचना के उद्देश्यों के लिए है।\"\r\n  },\r\n  marathi: {\r\n    welcome: \"चॅटबॉटमध्ये तुमचे स्वागत आहे!\",\r\n    greeting: \"नमस्कार! मी तुम्हाला कशाप्रकारे मदत करू शकतो?\",\r\n    notFound: \"माझा खेद आहे, मी ते समजू शकलो नाही. कृपया पुन्हा वाक्यांशित करा.\",\r\n    placeholder: \"तुमचा संदेश टाइप करा...\",\r\n    recommendRemedies: \"इथे काही उपचार आहेत:\",\r\n    recommendMedication: \"तुम्ही या औषधांचा विचार करू शकता:\",\r\n    questionPrompt: \"कृपया तुमचे लक्षणे सांगा:\",\r\n    clearChat: \"चॅट साफ करा\",\r\n    disclaimer: \"हा चॅटबॉट माहितीच्या उद्देशांसाठी आहे.\"\r\n  }\r\n};\r\n\r\nconst medicalQA = {\r\n  english: {\r\n    \"headache\": {\r\n      questions: [\r\n        \"How severe is your headache?\",\r\n        \"Are you experiencing any nausea?\",\r\n        \"Do you have sensitivity to light or sound?\"\r\n      ],\r\n      remedies: [\r\n        \"Rest in a quiet and dark room.\",\r\n        \"Apply a cold compress to your forehead.\",\r\n        \"Drink plenty of fluids.\"\r\n      ],\r\n      medications: [\r\n        \"Acetaminophen (Tylenol)\",\r\n        \"Ibuprofen (Advil, Motrin)\",\r\n        \"Aspirin\"\r\n      ]\r\n    },\r\n    \"fever\": {\r\n      questions: [\r\n        \"What is your current temperature?\",\r\n        \"Are you feeling chills or sweating?\",\r\n        \"Have you experienced any other symptoms?\"\r\n      ],\r\n      remedies: [\r\n        \"Rest and get plenty of sleep.\",\r\n        \"Drink plenty of fluids (water, clear broth, herbal tea).\",\r\n        \"Wear light clothing.\"\r\n      ],\r\n      medications: [\r\n        \"Acetaminophen (Tylenol)\",\r\n        \"Ibuprofen (Advil, Motrin)\"\r\n      ]\r\n    }\r\n    // Add more conditions here...\r\n  },\r\n  hindi: {\r\n    \"सिरदर्द\": {\r\n      questions: [\r\n        \"आपका सिरदर्द कितना गंभीर है?\",\r\n        \"क्या आपको मतली का अनुभव हो रहा है?\",\r\n        \"क्या आपको रोशनी या ध्वनि के प्रति संवेदनशीलता है?\"\r\n      ],\r\n      remedies: [\r\n        \"एक शांत और अंधेरी जगह पर आराम करें।\",\r\n        \"अपने माथे पर ठंडी पट्टी लगाएं।\",\r\n        \"पर्याप्त मात्रा में तरल पदार्थ पिएं।\"\r\n      ],\r\n      medications: [\r\n        \"अॅसिटामिनोफेन (टायलेनॉल)\",\r\n        \"आयबुप्रोफेन (एडविल, मोट्रिन)\",\r\n        \"असपिरिन\"\r\n      ]\r\n    }\r\n    // Add more conditions here...\r\n  },\r\n  marathi: {\r\n    \"ताप\": {\r\n      questions: [\r\n        \"तुमचा सद्य तापमान किती आहे?\",\r\n        \"तुम्हाला थंडी किंवा घाम येत आहे का?\",\r\n        \"तुम्हाला इतर कोणते लक्षणे अनुभवली आहेत का?\"\r\n      ],\r\n      remedies: [\r\n        \"आराम करा आणि भरपूर झोप घ्या\",\r\n        \"भरपूर पाणी प्या (पाणी, स्वच्छ शोरबा, औषधी चहा)\",\r\n        \"हलके कपडे घाला\"\r\n      ],\r\n      medications: [\r\n        \"अॅसिटामिनोफेन (टायलेनॉल)\",\r\n        \"आयबुप्रोफेन (एडविल, मोट्रिन)\"\r\n      ]\r\n    }\r\n    // Add more conditions here...\r\n  }\r\n};\r\n\r\nconst Chatbot = () => {\r\n  const [userMessage, setUserMessage] = useState('');\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [language, setLanguage] = useState('english');\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(-1);\r\n  const [currentCondition, setCurrentCondition] = useState('');\r\n\r\n  const handleLanguageChange = (e) => {\r\n    setLanguage(e.target.value);\r\n    setChatHistory([]);\r\n    setCurrentQuestionIndex(-1); // Reset question index\r\n  };\r\n\r\n  const handleSendMessage = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!userMessage) return;\r\n\r\n    // Store user message in chat history\r\n    setChatHistory((prev) => [...prev, { user: userMessage }]);\r\n\r\n    // Process the message\r\n    const lowerCaseMessage = userMessage.toLowerCase();\r\n    const response = processMessage(lowerCaseMessage);\r\n    \r\n    // Store response in chat history\r\n    setChatHistory((prev) => [...prev, { bot: response }]);\r\n    setUserMessage('');\r\n  };\r\n\r\n  const processMessage = (message) => {\r\n    // Handle greeting\r\n    if (message.includes(\"hi\") || message.includes(\"hello\")) {\r\n      return languages[language].greeting;\r\n    }\r\n\r\n    // Check for medical questions\r\n    const medicalTerms = Object.keys(medicalQA[language]);\r\n    for (let term of medicalTerms) {\r\n      if (message.includes(term)) {\r\n        setCurrentCondition(term);\r\n        setCurrentQuestionIndex(0); // Start asking the first question\r\n        return languages[language].questionPrompt; // Initial prompt\r\n      }\r\n    }\r\n\r\n    // Handle questions\r\n    if (currentCondition && currentQuestionIndex >= 0) {\r\n      const questions = medicalQA[language][currentCondition].questions;\r\n      if (currentQuestionIndex < questions.length) {\r\n        const question = questions[currentQuestionIndex];\r\n        setCurrentQuestionIndex(currentQuestionIndex + 1); // Move to the next question\r\n        return question;\r\n      } else {\r\n        // If all questions have been asked, provide remedies and medications\r\n        const { remedies, medications } = medicalQA[language][currentCondition];\r\n        const response = languages[language].recommendRemedies + '\\n' + remedies.join('\\n') + \r\n                         '\\n\\n' + languages[language].recommendMedication + '\\n' + medications.join('\\n');\r\n        // Reset current condition and question index\r\n        setCurrentCondition('');\r\n        setCurrentQuestionIndex(-1);\r\n        return response;\r\n      }\r\n    }\r\n\r\n    // If no known terms found\r\n    return languages[language].notFound;\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot\">\r\n      <h1>{languages[language].welcome}</h1>\r\n      <select value={language} onChange={handleLanguageChange}>\r\n        <option value=\"english\">English</option>\r\n        <option value=\"hindi\">Hindi</option>\r\n        <option value=\"marathi\">Marathi</option>\r\n      </select>\r\n      <div className=\"chat-container\">\r\n        <div className=\"chat-history\">\r\n          {chatHistory.map((entry, index) => (\r\n            <div key={index} className={entry.user ? \"user-message\" : \"bot-message\"}>\r\n              {entry.user ? entry.user : entry.bot}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <form onSubmit={handleSendMessage}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder={languages[language].placeholder}\r\n            value={userMessage}\r\n            onChange={(e) => setUserMessage(e.target.value)}\r\n          />\r\n          <button type=\"submit\">Send</button>\r\n        </form>\r\n      </div>\r\n      <div className=\"disclaimer\">{languages[language].disclaimer}</div>\r\n      <button onClick={() => setChatHistory([])}>{languages[language].clearChat}</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}