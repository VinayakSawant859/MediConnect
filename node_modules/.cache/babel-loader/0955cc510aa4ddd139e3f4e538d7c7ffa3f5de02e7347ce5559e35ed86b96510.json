{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\test\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport VideoRecommendations from './components/VideoRecommendations';\nimport './Chatbot.css';\nimport { Trash2, Send } from \"lucide-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst languages = {\n  english: {\n    welcome: \"Hello! I'm MEDICONNECT, your medical assistant. How can I help you today?\",\n    placeholder: \"Type your medical question...\",\n    notFound: \"I'm sorry, I don't have specific information about that. Please consult a healthcare professional for accurate medical advice.\",\n    askMedicine: \"Have you taken any medication for this?\",\n    askWhichMedicine: \"Which medication have you taken?\",\n    askDuration: \"How long have you been experiencing these symptoms?\",\n    suggestConsult: \"If symptoms persist or worsen, please consult a healthcare professional.\",\n    recommendRemedies: \"Here are some remedies you can try:\",\n    recommendMedication: \"If you haven't taken any medication, you can consider these over-the-counter options:\",\n    correctMedication: \"You mentioned taking {0}. This is an appropriate medication for your symptoms.\",\n    incorrectMedication: \"The medication you mentioned ({0}) may not be the most appropriate for your symptoms. Here are some more suitable options:\",\n    askDosage: \"You should take this medication once in the morning and once at night. Adjust timing as needed.\",\n    clearChat: \"Clear Chat\",\n    disclaimer: \"THIS CHATBOT IS MADE UP BY MEDICONNECT GUYS ...\",\n    greeting: \"Hello! How may I help you?\",\n    thankYou: \"Welcome!!!\"\n  },\n  hindi: {\n    welcome: \"नमस्ते! मैं MEDICONNECT हूं, आपका चिकित्सा सहायक। आज मैं आपकी कैसे मदद कर सकता हूं?\",\n    placeholder: \"अपना चिकित्सा प्रश्न टाइप करें...\",\n    notFound: \"मुझे इस बारे में विशेष जानकारी नहीं है। कृपया सटीक चिकित्सा सलाह के लिए किसी स्वास्थ्य सेवा पेशेवर से परामर्श करें।\",\n    askMedicine: \"क्या आपने इसके लिए कोई दवा ली है?\",\n    askWhichMedicine: \"आपने कौन सी दवा ली है?\",\n    askDuration: \"आप कब से इन लक्षणों का अनुभव कर रहे हैं?\",\n    suggestConsult: \"यदि लक्षण बने रहते हैं या बिगड़ जाते हैं, तो कृपया किसी स्वास्थ्य सेवा पेशेवर से परामर्श करें।\",\n    recommendRemedies: \"यहां कुछ उपाय हैं जिन्हें आप आजमा सकते हैं:\",\n    recommendMedication: \"यदि आपने कोई दवा नहीं ली है, तो आप इन ओवर-द-काउंटर विकल्पों पर विचार कर सकते हैं:\",\n    correctMedication: \"आपने {0} लेने का उल्लेख किया। यह आपके लक्षणों के लिए एक उपयुक्त दवा है।\",\n    incorrectMedication: \"आपके द्वारा उल्लेखित दवा ({0}) आपके लक्षणों के लिए सबसे उपयुक्त नहीं हो सकती है। यहां कुछ अधिक उपयुक्त विकल्प हैं:\",\n    askDosage: \"आपको यह दवा सुबह और रात में एक बार लेनी चाहिए। आवश्यकता अनुसार समय समायोजित करें।\",\n    clearChat: \"चैट साफ़ करें\",\n    disclaimer: \"यह चैटबॉट MEDICONNECT द्वारा बनाया गया है ...\",\n    greeting: \"नमस्ते! मैं आपकी कैसे मदद कर सकता हूं?\",\n    thankYou: \"स्वागत है!!!\"\n  },\n  marathi: {\n    welcome: \"नमस्कार! मी MEDICONNECT आहे, तुमचा वैद्यकीय सहाय्यक. आज मी तुमची कशी मदत करू शकतो?\",\n    placeholder: \"तुमचा वैद्यकीय प्रश्न टाइप करा...\",\n    notFound: \"मला याबद्दल विशिष्ट माहिती नाही. कृपया अचूक वैद्यकीय सल्ल्यासाठी आरोग्य सेवा व्यावसायिकाचा सल्ला घ्या.\",\n    askMedicine: \"तुम्ही यासाठी कोणतेही औषध घेतले आहे का?\",\n    askWhichMedicine: \"तुम्ही कोणते औषध घेतले आहे?\",\n    askDuration: \"तुम्हाला किती काळापासून ही लक्षणे जाणवत आहेत?\",\n    suggestConsult: \"जर लक्षणे कायम राहिली किंवा वाढली तर कृपया आरोग्य सेवा व्यावसायिकाचा सल्ला घ्या.\",\n    recommendRemedies: \"येथे काही उपाय आहेत जे तुम्ही करून पाहू शकता:\",\n    recommendMedication: \"जर तुम्ही कोणतेही औषध घेतले नसेल, तर तुम्ही या ओव्हर-द-काउंटर पर्यायांचा विचार करू शकता:\",\n    correctMedication: \"तुम्ही {0} घेतल्याचा उल्लेख केला. हे तुमच्या लक्षणांसाठी योग्य औषध आहे.\",\n    incorrectMedication: \"तुम्ही उल्लेख केलेले औषध ({0}) तुमच्या लक्षणांसाठी सर्वात योग्य नसू शकते. येथे काही अधिक योग्य पर्याय आहेत:\",\n    askDosage: \"हे औषध तुम्हाला सकाळी एकदा आणि रात्री एकदा घ्यावे लागेल. वेळ आवश्यकतेनुसार समायोजित करा.\",\n    clearChat: \"चॅट साफ करा\",\n    disclaimer: \"हा चॅटबॉट MEDICONNECT द्वारे तयार केला आहे ...\",\n    greeting: \"नमस्कार! मी तुमची कशी मदत करू शकतो?\",\n    thankYou: \"स्वागत आहे!!!\"\n  }\n};\nconst MEDICONNECTChatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [language, setLanguage] = useState(\"english\");\n  const [currentSymptom, setCurrentSymptom] = useState(null);\n  const [conversationStage, setConversationStage] = useState(\"initial\");\n  const findSymptom = question => {\n    const lowerQuestion = question.toLowerCase();\n    const qaSet = medicalQA[language];\n    for (const key of Object.keys(qaSet)) {\n      if (lowerQuestion.includes(key.toLowerCase())) {\n        return key;\n      }\n    }\n    return null;\n  };\n  const getResponse = (symptom, duration, tookMedicine, medicineTaken) => {\n    const {\n      remedies,\n      medications\n    } = medicalQA[language][symptom];\n    let response = `You've been experiencing ${symptom} for ${duration}. ${languages[language].recommendRemedies}\\n\\n`;\n    response += remedies.map((remedy, index) => `${index + 1}. ${remedy}`).join(\"\\n\");\n    if (!tookMedicine) {\n      response += `\\n\\n${languages[language].recommendMedication}\\n\\n`;\n      response += medications.map((medication, index) => `${index + 1}. ${medication}`).join(\"\\n\");\n      response += `\\n\\n${languages[language].askDosage}`;\n    } else if (medicineTaken) {\n      const isCorrectMedication = medications.some(med => medicineTaken.toLowerCase().includes(med.toLowerCase()));\n      response += isCorrectMedication ? languages[language].correctMedication.replace(\"{0}\", medicineTaken) : languages[language].incorrectMedication.replace(\"{0}\", medicineTaken);\n    }\n    return response;\n  };\n  const handleSend = () => {\n    if (input.trim() === \"\") return;\n    const newMessage = {\n      text: input,\n      user: true\n    };\n    setMessages([...messages, newMessage]);\n    const symptom = findSymptom(input);\n    if (symptom) {\n      const response = getResponse(symptom, \"a few days\", false, \"\");\n      setMessages(prevMessages => [...prevMessages, {\n        text: response,\n        user: false\n      }]);\n    } else {\n      const response = languages[language].notFound;\n      setMessages(prevMessages => [...prevMessages, {\n        text: response,\n        user: false\n      }]);\n    }\n    setInput(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: languages[language].welcome\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.user ? \"user\" : \"bot\"}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: languages[language].placeholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: /*#__PURE__*/_jsxDEV(Send, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(MEDICONNECTChatbot, \"r+PE0b1aN6DdRJaj0nLN5+r8igI=\");\n_c = MEDICONNECTChatbot;\nexport default MEDICONNECTChatbot;\nvar _c;\n$RefreshReg$(_c, \"MEDICONNECTChatbot\");","map":{"version":3,"names":["useState","VideoRecommendations","Trash2","Send","jsxDEV","_jsxDEV","languages","english","welcome","placeholder","notFound","askMedicine","askWhichMedicine","askDuration","suggestConsult","recommendRemedies","recommendMedication","correctMedication","incorrectMedication","askDosage","clearChat","disclaimer","greeting","thankYou","hindi","marathi","MEDICONNECTChatbot","_s","messages","setMessages","input","setInput","language","setLanguage","currentSymptom","setCurrentSymptom","conversationStage","setConversationStage","findSymptom","question","lowerQuestion","toLowerCase","qaSet","medicalQA","key","Object","keys","includes","getResponse","symptom","duration","tookMedicine","medicineTaken","remedies","medications","response","map","remedy","index","join","medication","isCorrectMedication","some","med","replace","handleSend","trim","newMessage","text","user","prevMessages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ADMIN/test/src/Chatbot.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport VideoRecommendations from './components/VideoRecommendations';\r\nimport './Chatbot.css';\r\nimport { Trash2, Send } from \"lucide-react\";\r\n\r\nconst languages = {\r\n  english: {\r\n    welcome: \"Hello! I'm MEDICONNECT, your medical assistant. How can I help you today?\",\r\n    placeholder: \"Type your medical question...\",\r\n    notFound: \"I'm sorry, I don't have specific information about that. Please consult a healthcare professional for accurate medical advice.\",\r\n    askMedicine: \"Have you taken any medication for this?\",\r\n    askWhichMedicine: \"Which medication have you taken?\",\r\n    askDuration: \"How long have you been experiencing these symptoms?\",\r\n    suggestConsult: \"If symptoms persist or worsen, please consult a healthcare professional.\",\r\n    recommendRemedies: \"Here are some remedies you can try:\",\r\n    recommendMedication: \"If you haven't taken any medication, you can consider these over-the-counter options:\",\r\n    correctMedication: \"You mentioned taking {0}. This is an appropriate medication for your symptoms.\",\r\n    incorrectMedication: \"The medication you mentioned ({0}) may not be the most appropriate for your symptoms. Here are some more suitable options:\",\r\n    askDosage: \"You should take this medication once in the morning and once at night. Adjust timing as needed.\",\r\n    clearChat: \"Clear Chat\",\r\n    disclaimer: \"THIS CHATBOT IS MADE UP BY MEDICONNECT GUYS ...\",\r\n    greeting: \"Hello! How may I help you?\",\r\n    thankYou: \"Welcome!!!\"\r\n  },\r\n  hindi: {\r\n    welcome: \"नमस्ते! मैं MEDICONNECT हूं, आपका चिकित्सा सहायक। आज मैं आपकी कैसे मदद कर सकता हूं?\",\r\n    placeholder: \"अपना चिकित्सा प्रश्न टाइप करें...\",\r\n    notFound: \"मुझे इस बारे में विशेष जानकारी नहीं है। कृपया सटीक चिकित्सा सलाह के लिए किसी स्वास्थ्य सेवा पेशेवर से परामर्श करें।\",\r\n    askMedicine: \"क्या आपने इसके लिए कोई दवा ली है?\",\r\n    askWhichMedicine: \"आपने कौन सी दवा ली है?\",\r\n    askDuration: \"आप कब से इन लक्षणों का अनुभव कर रहे हैं?\",\r\n    suggestConsult: \"यदि लक्षण बने रहते हैं या बिगड़ जाते हैं, तो कृपया किसी स्वास्थ्य सेवा पेशेवर से परामर्श करें।\",\r\n    recommendRemedies: \"यहां कुछ उपाय हैं जिन्हें आप आजमा सकते हैं:\",\r\n    recommendMedication: \"यदि आपने कोई दवा नहीं ली है, तो आप इन ओवर-द-काउंटर विकल्पों पर विचार कर सकते हैं:\",\r\n    correctMedication: \"आपने {0} लेने का उल्लेख किया। यह आपके लक्षणों के लिए एक उपयुक्त दवा है।\",\r\n    incorrectMedication: \"आपके द्वारा उल्लेखित दवा ({0}) आपके लक्षणों के लिए सबसे उपयुक्त नहीं हो सकती है। यहां कुछ अधिक उपयुक्त विकल्प हैं:\",\r\n    askDosage: \"आपको यह दवा सुबह और रात में एक बार लेनी चाहिए। आवश्यकता अनुसार समय समायोजित करें।\",\r\n    clearChat: \"चैट साफ़ करें\",\r\n    disclaimer: \"यह चैटबॉट MEDICONNECT द्वारा बनाया गया है ...\",\r\n    greeting: \"नमस्ते! मैं आपकी कैसे मदद कर सकता हूं?\",\r\n    thankYou: \"स्वागत है!!!\"\r\n  },\r\n  marathi: {\r\n    welcome: \"नमस्कार! मी MEDICONNECT आहे, तुमचा वैद्यकीय सहाय्यक. आज मी तुमची कशी मदत करू शकतो?\",\r\n    placeholder: \"तुमचा वैद्यकीय प्रश्न टाइप करा...\",\r\n    notFound: \"मला याबद्दल विशिष्ट माहिती नाही. कृपया अचूक वैद्यकीय सल्ल्यासाठी आरोग्य सेवा व्यावसायिकाचा सल्ला घ्या.\",\r\n    askMedicine: \"तुम्ही यासाठी कोणतेही औषध घेतले आहे का?\",\r\n    askWhichMedicine: \"तुम्ही कोणते औषध घेतले आहे?\",\r\n    askDuration: \"तुम्हाला किती काळापासून ही लक्षणे जाणवत आहेत?\",\r\n    suggestConsult: \"जर लक्षणे कायम राहिली किंवा वाढली तर कृपया आरोग्य सेवा व्यावसायिकाचा सल्ला घ्या.\",\r\n    recommendRemedies: \"येथे काही उपाय आहेत जे तुम्ही करून पाहू शकता:\",\r\n    recommendMedication: \"जर तुम्ही कोणतेही औषध घेतले नसेल, तर तुम्ही या ओव्हर-द-काउंटर पर्यायांचा विचार करू शकता:\",\r\n    correctMedication: \"तुम्ही {0} घेतल्याचा उल्लेख केला. हे तुमच्या लक्षणांसाठी योग्य औषध आहे.\",\r\n    incorrectMedication: \"तुम्ही उल्लेख केलेले औषध ({0}) तुमच्या लक्षणांसाठी सर्वात योग्य नसू शकते. येथे काही अधिक योग्य पर्याय आहेत:\",\r\n    askDosage: \"हे औषध तुम्हाला सकाळी एकदा आणि रात्री एकदा घ्यावे लागेल. वेळ आवश्यकतेनुसार समायोजित करा.\",\r\n    clearChat: \"चॅट साफ करा\",\r\n    disclaimer: \"हा चॅटबॉट MEDICONNECT द्वारे तयार केला आहे ...\",\r\n    greeting: \"नमस्कार! मी तुमची कशी मदत करू शकतो?\",\r\n    thankYou: \"स्वागत आहे!!!\"\r\n  }\r\n}\r\n\r\nconst MEDICONNECTChatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [language, setLanguage] = useState(\"english\");\r\n  const [currentSymptom, setCurrentSymptom] = useState(null);\r\n  const [conversationStage, setConversationStage] = useState(\"initial\");\r\n\r\n  const findSymptom = (question) => {\r\n    const lowerQuestion = question.toLowerCase();\r\n    const qaSet = medicalQA[language];\r\n    for (const key of Object.keys(qaSet)) {\r\n      if (lowerQuestion.includes(key.toLowerCase())) {\r\n        return key;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const getResponse = (symptom, duration, tookMedicine, medicineTaken) => {\r\n    const { remedies, medications } = medicalQA[language][symptom];\r\n    let response = `You've been experiencing ${symptom} for ${duration}. ${languages[language].recommendRemedies}\\n\\n`;\r\n    response += remedies.map((remedy, index) => `${index + 1}. ${remedy}`).join(\"\\n\");\r\n\r\n    if (!tookMedicine) {\r\n      response += `\\n\\n${languages[language].recommendMedication}\\n\\n`;\r\n      response += medications.map((medication, index) => `${index + 1}. ${medication}`).join(\"\\n\");\r\n      response += `\\n\\n${languages[language].askDosage}`;\r\n    } else if (medicineTaken) {\r\n      const isCorrectMedication = medications.some(med => medicineTaken.toLowerCase().includes(med.toLowerCase()));\r\n      response += isCorrectMedication\r\n        ? languages[language].correctMedication.replace(\"{0}\", medicineTaken)\r\n        : languages[language].incorrectMedication.replace(\"{0}\", medicineTaken);\r\n    }\r\n    return response;\r\n  };\r\n\r\n  const handleSend = () => {\r\n    if (input.trim() === \"\") return;\r\n    const newMessage = { text: input, user: true };\r\n    setMessages([...messages, newMessage]);\r\n\r\n    const symptom = findSymptom(input);\r\n    if (symptom) {\r\n      const response = getResponse(symptom, \"a few days\", false, \"\");\r\n      setMessages((prevMessages) => [...prevMessages, { text: response, user: false }]);\r\n    } else {\r\n      const response = languages[language].notFound;\r\n      setMessages((prevMessages) => [...prevMessages, { text: response, user: false }]);\r\n    }\r\n\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot\">\r\n      <div className=\"chat-header\">{languages[language].welcome}</div>\r\n      <div className=\"chat-messages\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`message ${message.user ? \"user\" : \"bot\"}`}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"chat-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder={languages[language].placeholder}\r\n        />\r\n        <button onClick={handleSend}><Send /></button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MEDICONNECTChatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}