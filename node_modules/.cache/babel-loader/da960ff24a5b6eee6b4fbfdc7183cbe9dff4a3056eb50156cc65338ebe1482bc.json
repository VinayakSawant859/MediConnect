{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\test\\\\src\\\\Prescription.js\",\n  _s = $RefreshSig$();\nimport { jsPDF } from \"jspdf\";\nimport { useContext } from \"react\";\nimport PrescriptionProvider from \"./contexts/PrescriptionContext.js\"; // Import context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Prescription = ({\n  symptoms,\n  remedies,\n  medications,\n  patientName\n}) => {\n  _s();\n  const {\n    prescriptions\n  } = usePrescription();\n  const generatePDF = () => {\n    const doc = new jsPDF();\n    doc.setFontSize(20);\n    doc.text(\"MediConnect - Prescription\", 10, 20);\n    doc.setFontSize(12);\n    doc.text(`Patient: ${patientName}`, 10, 30);\n    doc.text(`Symptoms: ${symptoms}`, 10, 40);\n    doc.text(\"Suggested Remedies:\", 10, 70);\n    remedies.forEach((remedy, index) => {\n      doc.text(`${index + 1}. ${remedy}`, 10, 80 + index * 10);\n    });\n    doc.text(\"Suggested Medications:\", 10, 120);\n    medications.forEach((medication, index) => {\n      doc.text(`${index + 1}. ${medication.name} - ${medication.dosage || \"As directed\"}`, 10, 130 + index * 10);\n    });\n    doc.setFontSize(20);\n    doc.text(\"Generated by Team MediConnect\", 10, 280);\n    doc.save(`Prescription.pdf`);\n\n    // Store in global state\n    const newPrescription = {\n      id: Date.now(),\n      patient: patientName,\n      prescription: medications.map(med => `${med.name} - ${med.dosage}`).join(\", \")\n    };\n    addPrescription(newPrescription);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generatePDF,\n      className: \"generate-pdf-btn\",\n      children: \"Download & Save Prescription\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(Prescription, \"jriipnejxjTRTxi5amnT5hRx70o=\", true);\n_c = Prescription;\nexport default Prescription;\nvar _c;\n$RefreshReg$(_c, \"Prescription\");","map":{"version":3,"names":["jsPDF","useContext","PrescriptionProvider","jsxDEV","_jsxDEV","Prescription","symptoms","remedies","medications","patientName","_s","prescriptions","usePrescription","generatePDF","doc","setFontSize","text","forEach","remedy","index","medication","name","dosage","save","newPrescription","id","Date","now","patient","prescription","map","med","join","addPrescription","children","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ADMIN/test/src/Prescription.js"],"sourcesContent":["import { jsPDF } from \"jspdf\";\r\nimport { useContext } from \"react\";\r\nimport PrescriptionProvider  from \"./contexts/PrescriptionContext.js\"; // Import context\r\n\r\nconst Prescription = ({ symptoms, remedies, medications, patientName }) => {\r\n  const { prescriptions } = usePrescription();\r\n  const generatePDF = () => {\r\n    const doc = new jsPDF();\r\n    \r\n    doc.setFontSize(20);\r\n    doc.text(\"MediConnect - Prescription\", 10, 20);\r\n\r\n    doc.setFontSize(12);\r\n    doc.text(`Patient: ${patientName}`, 10, 30);\r\n    doc.text(`Symptoms: ${symptoms}`, 10, 40);\r\n    \r\n    doc.text(\"Suggested Remedies:\", 10, 70);\r\n    remedies.forEach((remedy, index) => {\r\n      doc.text(`${index + 1}. ${remedy}`, 10, 80 + index * 10);\r\n    });\r\n\r\n    doc.text(\"Suggested Medications:\", 10, 120);\r\n    medications.forEach((medication, index) => {\r\n      doc.text(`${index + 1}. ${medication.name} - ${medication.dosage || \"As directed\"}`, 10, 130 + index * 10);\r\n    });\r\n\r\n    doc.setFontSize(20);\r\n    doc.text(\"Generated by Team MediConnect\", 10, 280);\r\n    doc.save(`Prescription.pdf`);\r\n\r\n    // Store in global state\r\n    const newPrescription = {\r\n      id: Date.now(),\r\n      patient: patientName,\r\n      prescription: medications.map(med => `${med.name} - ${med.dosage}`).join(\", \")\r\n    };\r\n    addPrescription(newPrescription);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={generatePDF} className=\"generate-pdf-btn\">\r\n        Download & Save Prescription\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Prescription;\r\n"],"mappings":";;AAAA,SAASA,KAAK,QAAQ,OAAO;AAC7B,SAASC,UAAU,QAAQ,OAAO;AAClC,OAAOC,oBAAoB,MAAO,mCAAmC,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvE,MAAMC,YAAY,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,QAAQ;EAAEC,WAAW;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EACzE,MAAM;IAAEC;EAAc,CAAC,GAAGC,eAAe,CAAC,CAAC;EAC3C,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,GAAG,GAAG,IAAId,KAAK,CAAC,CAAC;IAEvBc,GAAG,CAACC,WAAW,CAAC,EAAE,CAAC;IACnBD,GAAG,CAACE,IAAI,CAAC,4BAA4B,EAAE,EAAE,EAAE,EAAE,CAAC;IAE9CF,GAAG,CAACC,WAAW,CAAC,EAAE,CAAC;IACnBD,GAAG,CAACE,IAAI,CAAC,YAAYP,WAAW,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAC3CK,GAAG,CAACE,IAAI,CAAC,aAAaV,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAEzCQ,GAAG,CAACE,IAAI,CAAC,qBAAqB,EAAE,EAAE,EAAE,EAAE,CAAC;IACvCT,QAAQ,CAACU,OAAO,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;MAClCL,GAAG,CAACE,IAAI,CAAC,GAAGG,KAAK,GAAG,CAAC,KAAKD,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,GAAGC,KAAK,GAAG,EAAE,CAAC;IAC1D,CAAC,CAAC;IAEFL,GAAG,CAACE,IAAI,CAAC,wBAAwB,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3CR,WAAW,CAACS,OAAO,CAAC,CAACG,UAAU,EAAED,KAAK,KAAK;MACzCL,GAAG,CAACE,IAAI,CAAC,GAAGG,KAAK,GAAG,CAAC,KAAKC,UAAU,CAACC,IAAI,MAAMD,UAAU,CAACE,MAAM,IAAI,aAAa,EAAE,EAAE,EAAE,EAAE,GAAG,GAAGH,KAAK,GAAG,EAAE,CAAC;IAC5G,CAAC,CAAC;IAEFL,GAAG,CAACC,WAAW,CAAC,EAAE,CAAC;IACnBD,GAAG,CAACE,IAAI,CAAC,+BAA+B,EAAE,EAAE,EAAE,GAAG,CAAC;IAClDF,GAAG,CAACS,IAAI,CAAC,kBAAkB,CAAC;;IAE5B;IACA,MAAMC,eAAe,GAAG;MACtBC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACdC,OAAO,EAAEnB,WAAW;MACpBoB,YAAY,EAAErB,WAAW,CAACsB,GAAG,CAACC,GAAG,IAAI,GAAGA,GAAG,CAACV,IAAI,MAAMU,GAAG,CAACT,MAAM,EAAE,CAAC,CAACU,IAAI,CAAC,IAAI;IAC/E,CAAC;IACDC,eAAe,CAACT,eAAe,CAAC;EAClC,CAAC;EAED,oBACEpB,OAAA;IAAA8B,QAAA,eACE9B,OAAA;MAAQ+B,OAAO,EAAEtB,WAAY;MAACuB,SAAS,EAAC,kBAAkB;MAAAF,QAAA,EAAC;IAE3D;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAC9B,EAAA,CA1CIL,YAAY;AAAAoC,EAAA,GAAZpC,YAAY;AA4ClB,eAAeA,YAAY;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}